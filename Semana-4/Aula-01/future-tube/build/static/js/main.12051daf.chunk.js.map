{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","class","id","method","action","accept-charset","type","name","placeholder","autocomplete","aria-label","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAuFeA,MApFf,WACE,OACE,yBAAKC,MAAM,aACT,gCACE,0CACA,yBAAKC,GAAG,SAASD,MAAM,SAChB,0BAAOE,OAAO,MAAMC,OAAO,UAAUC,iBAAe,SAClD,2BAAOJ,OAAK,EAACK,KAAK,SAASC,KAAK,SAChC,2BAAQN,MAAM,aAAaK,KAAK,OAAOC,KAAK,GAAGL,GAAG,cAAcM,YAAY,QAAQC,aAAa,KAC1FC,aAAW,gBAI7B,8BACE,6BAAST,MAAM,QACb,yBAAKA,MAAM,aACT,4BACE,uBAAGU,MAAM,UAAT,UACA,uBAAGA,MAAM,WAAT,WACA,uBAAGA,MAAM,iBAAT,iBACA,uBAAGA,MAAM,aAAT,aACA,6BACA,uBAAGA,MAAM,cAAT,cACA,uBAAGA,MAAM,aAAT,gBAMN,6BAASV,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,wCAIF,6BAASA,MAAM,QACb,6BAAK,8BAAM,kCACX,2CChEUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.12051daf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div class=\"container\">\n      <header>\n        <h1>FutureTube</h1>\n        <div id=\"buscar\" class=\"busca\">\n               <form  method=\"GET\" action=\"/search\" accept-charset=\"UTF-8\">\n                 <input class type=\"hidden\" name=\"utf8\"></input>\n                 <input  class=\"form-input\" type=\"text\" name=\"\" id=\"buscar-item\" placeholder=\"busca\" autocomplete=\"on\"\n                        aria-label=\"procurar\"></input>\n               </form>\n            </div>\n      </header>\n      <main>\n        <article class=\"menu\">\n          <div class=\"menu-item\">\n            <ul>\n              <p title=\"inicio\">Inicio</p>\n              <p title=\"Em alta\">Em alta</p>\n              <p title=\"Inscriçoes\">Inscriçoes</p>\n              <p title=\"Originais\">Originais</p>\n              <hr></hr>\n              <p title=\"Biblioteca\">Biblioteca</p>\n              <p title=\"Historico\">Historico</p>\n\n            </ul>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n        <article class=\"item\">\n          <div><ideo><source></source></ideo>\n          <p>Wake Up</p>\n          </div>\n        </article>\n\n      </main>\n          </div>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}